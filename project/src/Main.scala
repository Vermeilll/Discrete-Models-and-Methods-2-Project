//case1
//solar panels
class SolarPower(val capacity: Double) {
  def generateenergy(): Double = {
    capacity * 0.1    //assuming that the energy generated by solar panels is 10% of the capacity
  }
}

//wind turbines
class WindPower(val capacity: Double) {
  def generateenergy(): Double = {
    capacity * 0.2    //assuming that the energy generated by wind turbines is 20% of the capacity
  }
}

//hydropower
class HydroPower(val capacity: Double) {
  def generateenergy(): Double = {
    capacity * 0.3    //assuming that the energy generated by hydropower is 30% of the capacity
  }
}

//control renewable energy
class REController(val solarPower: SolarPower,
                   val windPower: WindPower,
                   val hydroPower: HydroPower) {
  def control(powerDemand: Double): Unit = {
    val totalPower = solarPower.generateenergy() + windPower.generateenergy() + hydroPower.generateenergy()
    val excessPower = totalPower - powerDemand
    //Adjusting the operation of the power plant
    if (excessPower > 0) {
      storeExcessPower(excessPower)   //If the electricity generation exceeds the demand, the excess electricity will be stored
    }
    else if (excessPower < 0) {
      startBackupGenerator(-excessPower)    //If the power generation is less than the demand, start the backup generator
    }
  }

  private def storeExcessPower(excessPower: Double): Unit = {
    println("Storing "+excessPower+" kW of electricity")
  }

  private def startBackupGenerator(powerShortage: Double): Unit = {
    println("Start the backup generator to supplement the shortage of "+powerShortage+" kW")
  }
}

object Main1 {
  def main(args: Array[String]): Unit = {
    val solar = new SolarPower(100)
    val wind = new WindPower(200)
    val hydro = new HydroPower(300)
    //The energy generated is 100 * 0.1+200 * 0.2+300 * 0.3=140
    val controller1 = new REController(solar, wind, hydro)
    controller1.control(200)
    //output:Start the backup generator to supplement the shortage of 60.0 kW
    val controller2 = new REController(solar, wind, hydro)
    controller1.control(100)
    //output:Storing 40.0 kW of electricity
  }
}


//case2
import java.io.{BufferedReader, File, FileReader, FileWriter}
import java.time.{Instant, LocalDateTime, ZoneOffset}
import scala.collection.mutable.ArrayBuffer

class DataRecorder {
  private val data = ArrayBuffer[String]()

  def recordSolarData(power: Double): Unit = {
    val timestamp = LocalDateTime.now()
    val timestampInMillis = timestamp.toInstant(ZoneOffset.UTC).toEpochMilli
    val dataStr = "Solar "+power+" "+timestampInMillis
    data += dataStr
    writeToFile(dataStr)
  }

  def recordWindData(power: Double): Unit = {
    val timestamp = LocalDateTime.now()
    val timestampInMillis = timestamp.toInstant(ZoneOffset.UTC).toEpochMilli
    val dataStr = "Wind "+power+" "+timestampInMillis
    data += dataStr
    writeToFile(dataStr)
  }

  def recordHydroData(power: Double): Unit = {
    val timestamp = LocalDateTime.now()
    val timestampInMillis = timestamp.toInstant(ZoneOffset.UTC).toEpochMilli
    val dataStr = "Hydro "+power+" "+timestampInMillis
    data += dataStr
    writeToFile(dataStr)
  }

  private def writeToFile(dataStr: String): Unit = {
    val file = new File("renewable_data.csv")
    val writer = new FileWriter(file, true)
    writer.write(dataStr + "\n")
    writer.close()
  }

  def readDataFromFile(): Unit = {
    val file = new File("renewable_data.csv")
    val reader = new BufferedReader(new FileReader(file))
    var line = reader.readLine()
    while (line != null) {
      println(line)
      line = reader.readLine()
    }
    reader.close()
  }
}
object Main2 {
  def main(args: Array[String]): Unit = {
    val recorder = new DataRecorder()
    recorder.recordSolarData(10.0)
    recorder.recordWindData(20.0)
    recorder.recordHydroData(30.0)
  }
}

//case3
object Main3{
  def main(args: Array[String]): Unit = {
    val recorder = new DataRecorder()
    recorder.readDataFromFile()
  }
}

//case4
import scala.io.Source

object EnergyAnalysis {
  def main(args: Array[String]): Unit = {
    //Data in data.txt
    val data = List(
      ("Solar", 100.0, 1640995200000L),
      ("Wind", 70.0, 1640995200000L),
      ("Hydro", 50.0, 1640995200000L),
      ("Solar", 80.0, 1640995200000L),
      ("Wind", 60.0, 1640995200000L),
      ("Hydro", 45.0, 1640995200000L),
      ("Solar", 90.0, 1640995200000L),
      ("Wind", 80.0, 1640995200000L),
      ("Hydro", 50.0, 1640995200000L)
    )
    val groupedData = data.groupBy(_._1)

    for ((energyType, energyData) <- groupedData) {
      val values = energyData.map(_._2)
      val timestamps = energyData.map(_._3)

      //Mean
      val mean = values.sum / values.length

      //Median
      val sortedValues = values.sorted
      val median = if (sortedValues.length % 2 == 0) {
        (sortedValues(sortedValues.length / 2 - 1) + sortedValues(sortedValues.length / 2)) / 2
      } else {
        sortedValues(sortedValues.length / 2)
      }

      //Mode
      val mode = values.groupBy(identity).maxBy(_._2.size)._1

      //Range
      val range = sortedValues.last - sortedValues.head

      //Midrange
      val midrange = (sortedValues.last + sortedValues.head) / 2

      println(energyType + ":")
      println("\tMean: " + mean)
      println("\tMedian: " + median)
      println("\tMode: " + mode)
      println("\tRange: " + range)
      println("\tMidrange: " + midrange)
    }
  }
}


//case5
import scala.concurrent.duration._

class SolarPanel(val id: Int) {
  private var outputPower: Double = 0.0
  private var isWorking: Boolean = true

  def setOutputPower(power: Double): Unit = {
    outputPower = power
    if (outputPower < 10.0) {
      isWorking = false
      sendAlarm()
    }
  }

  def isWorking1(): Boolean = isWorking

  def sendAlarm(): Unit = {
    // send alarm to operator
    println("Warning: Solar panel " + id + " output power is low!")
  }
}

class Operator {
  def receiveAlarm(message: String): Unit = {
    // receive and handle alarm
    println(message)
  }
}

object RenewableEnergySystem {
  def main(args: Array[String]): Unit = {
    val solarPanel1 = new SolarPanel(1)
    val solarPanel2 = new SolarPanel(2)
    val operator = new Operator

    // simulate solar panel output power
    while (true) {
      solarPanel1.setOutputPower(Math.random() * 15.0)
      solarPanel2.setOutputPower(Math.random() * 15.0)
      if (!solarPanel1.isWorking1() || !solarPanel2.isWorking1()) {
        operator.receiveAlarm("Warning: Solar panel output power is low!")
      }
      Thread.sleep(1.minutes.toMillis)
    }
  }
}
